<script>
// This example adds a search box to a map, using the Google Place Autocomplete
// feature. People can enter geographical searches. The search box will return a
// pick list containing a mix of places and predicted search terms.

// This example requires the Places library. Include the libraries=places
// parameter when you first load the API. For example:
// <script src="https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=places">

var markers = [];
var circles = [];
function initAutocomplete() {
  var map2 = new google.maps.Map(document.getElementById('new_rg_map'), {
    center: {lat: 5.5557, lng: -0.1963},
    zoom: 8,
    mapTypeId: google.maps.MapTypeId.ROADMAP
  });

  // Create the search box and link it to the UI element.
  var input = document.getElementById('pac-input');
  var searchBox = new google.maps.places.SearchBox(input);
  map2.controls[google.maps.ControlPosition.TOP_LEFT].push(input);

  // Bias the SearchBox results towards current map's viewport.
  map2.addListener('bounds_changed', function() {
    searchBox.setBounds(map2.getBounds());
  });

  // Listen for the event fired when the user selects a prediction and retrieve
  // more details for that place.
  searchBox.addListener('places_changed', function() {
    var places = searchBox.getPlaces();

    if (places.length == 0) {
      return;
    }

    // Clear out the old markers.
    markers.forEach(function(marker) {
      marker.setMap(null);
    });
    markers = [];

    // For each place, get the icon, name and location.
    var bounds = new google.maps.LatLngBounds();
    places.forEach(function(place) {
      if (!place.geometry) {
        console.log("Returned place contains no geometry");
        return;
      }
      var icon = {
        url: place.icon,
        size: new google.maps.Size(71, 71),
        origin: new google.maps.Point(0, 0),
        anchor: new google.maps.Point(17, 34),
        scaledSize: new google.maps.Size(25, 25)
      };

      // Create a marker for each place.
      markers.push(new google.maps.Marker({
        map: map,
        icon: icon,
        title: place.name,
        position: place.geometry.location
      }));

      if (place.geometry.viewport) {
        // Only geocodes have viewport.
        bounds.union(place.geometry.viewport);
      } else {
        bounds.extend(place.geometry.location);
      }
    });
    map2.fitBounds(bounds);
  });

  google.maps.event.addListener(map2, "click", function (event) {
    clearOverlays();
    var lat = event.latLng.lat();
    var lon = event.latLng.lng();
    var point = new google.maps.LatLng(lat, lon);
    var marker = new google.maps.Marker({
      map: map2,
      position: point
    });
    //console.log( lat + ', ' + lon );
    $("#new_reg_lat").val(lat);
    $("#new_reg_lon").val(lon);

    radius = new google.maps.Circle({map: map2,
      radius: 100,
      center: event.latLng,
      fillColor: '#777',
      fillOpacity: 0.1,
      strokeColor: '#AA0000',
      strokeOpacity: 0.8,
      strokeWeight: 2,
      draggable: true,
      editable: true
    });
    $("#new_rg_rad").val(100);
    google.maps.event.addListener(radius, 'radius_changed', function () {
      $("#new_rg_rad").val(radius.getRadius());
    });
    // Center of map
    //map2.panTo(new google.maps.LatLng(latitude,longitude));
    markers.push(marker);
    circles.push(radius);
  });
}

function clearOverlays() {
  for (var i = 0; i < markers.length; i++ ) {
    markers[i].setMap(null);
    circles[i].setMap(null);
  }
  markers.length = 0;
  circles.length = 0;
}

initAutocomplete();
</script>
